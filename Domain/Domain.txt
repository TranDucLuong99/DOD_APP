Các khái niệm cơ bản
Domain Oriented Design
Bạn không đọc nhầm đâu, là “Domain Oriented Design”. 😀
Việc đưa ra khái niệm này nhằm khẳng định rằng những nội dung bạn sắp đọc dưới đây hoàn toàn không
phải “Domain Driven Design” (DDD). Mặc dù mình vay mượn nhiều khái niệm từ DDD, nhưng ebook này
hoàn toàn không phải sách hướng dẫn thiết kế DDD. Nó đúc rút những kinh nghiệm cá nhân của mình
trong quá trình thiết kế ứng dụng web PHP, những đau thương mà mình muốn chia sẻ với bạn để giúp bạn
tránh gặp phải. Mình mong muốn thông qua ebook này, bạn có thể thiết kế những ứng dụng hướng
“nghiệp vụ” (Domain Oriented) một cách nhanh và đơn giản nhất, cũng như tìm ra một nguyên tắc lý thuyết
cho chính mình.
Với cách thiết kế “Domain Oriented Design”, mình tập trung vào đối tượng “Domain”. Nó đại diện cho tất cả
các vấn đề nghiệp vụ (business logic) trong ứng dụng của bạn. Thay vì thiết kế xoay quanh Controllers
/ Models / Services, mình sẽ đặt trọng tâm ứng dụng vào Domain, và tầng MVC được chuyển ra thành
một Layer riêng biệt. Bạn sẽ tìm thấy thông tin này ở Section: “Refactor ứng dụng MVC của bạn”.
Ebook này thiên nhiều về PHP, nhưng mình nghĩ các ngôn ngữ lập trình hoặc Framework OOP bất kỳ
cũng có thể áp dụng. Hy vọng nó sẽ đem lại thật nhiều giá trị cho bạn

Thiết kế hướng nghiệp vụ
Thiết kế hướng nghiệp vụ là gì ?
Mình định nghĩa một ứng dụng được tổ chức “hướng nghiệp vụ” (hay “Domain Oriented”) là:
● Nghiệp vụ (Business Logic) được đặt vào trung tâm ứng dụng thay vì các khái niệm kỹ thuật
(Technical term).
● Bạn sử dụng được ngôn ngữ nghiệp vụ khi giao tiếp với Product Owner, Business Analyst, và sử
dụng được ngôn ngữ kỹ thuật với Developer, Technical Leader một cách hoàn toàn độc lập.
● Giảm thiểu tối đa ảnh hưởng từ triển khai code hạ tầng (thay đổi framework, database, môi trường
cài đặt) đến logic nghiệp vụ (Hiểu nôm ra rằng tôi có thể mang đoạn code của mình đi bất cứ đâu
mà không sợ nghiệp vụ bị lỗi).
● Tốt nhất, codebase của bạn nên chính là lời mô tả cho các “User Story” của hệ thống.
Ý thứ hai có vẻ khá khó hiểu, mời bạn đến với phần tiếp theo để hiểu lý do vì sao mình cần một thiết kế
hướng nghiệp vụ nhé.

Tại sao cần thiết kế theo hướng nghiệp vụ ?
Các dự án phần mềm thường có xu hướng càng ngày càng phình to do yêu cầu nghiệp vụ càng ngày càng
phức tạp. Điều này là không thể tránh khỏi, vì phải đáp ứng những yêu cầu càng ngày càng cao và sự
cạnh tranh trên thị trường. Hãy tưởng tượng một tình huống giao tiếp, khi bạn BA (Business Analyst) tới và
đưa yêu cầu cho bạn:
BA: Em cần sản phẩm trên website có thể support được tính năng có nhiều biến thể khác nhau, các biến
thể có giá, có màu riêng biệt.
Bạn: Không vấn đề gì, anh sẽ thêm một cái bảng ABC, thêm một đoạn code XYZ và tính năng sẽ chạy trơn
tru.
Điều này nghe qua có vẻ bình thường, nhưng thực tế nó sẽ phát sinh các vấn đề:
● Tư duy gắn chặt nghiệp vụ với thiết kế kỹ thuật dẫn đến sự phụ thuộc chặt chẽ giữa hai yếu tố này
với nhau: việc mở rộng tính năng sẽ càng lúc càng trở nên rủi ro và khó khăn.
● Tốc độ prototype tính năng bị giảm đi đáng kể
● Vì bạn và người làm nghiệp vụ không nói chung một ngôn ngữ, nên hai bên có thể gặp tình huống
miss giao tiếp, ảnh hưởng đến kết quả dự án. (Tất nhiên, chúng ta có thể có các role trong team để
đảm bảo việc này được thông suốt, nhưng nếu các Developer trực tiếp có thể hiểu đúng và đủ
nghiệp vụ ngay từ đầu, điều này sẽ rất có lợi cho việc phát triển sau này).
Hoặc, bạn có thể nhìn vào một ứng dụng MVC truyền thống trên Laravel:
Rất khó để đoán định Project này sẽ làm gì nếu chỉ nhìn qua các Controllers / Models. Thông thường,
bạn sẽ phải trace từ file routes.php đi và lần mò dần các nghiệp vụ của dự án. Điều này, thông thường là
sẽ rất khó cho người khác tiếp cận nếu dự án của bạn có nhiều logic phức tạp, chồng chéo lên nhau. Từ
đó xuất phát nhu cầu có một cách triển khai dự án tập trung vào giải quyết các vấn đề nghiệp vụ, cũng như
dễ dàng refactor từ mô hình MVC.

Thiết kế hướng nghiệp vụ như thế nào ?
Trong khuôn khổ của ebook này, mình mong muốn đưa đến cho bạn một cách thiết kế đơn giản nhất có
thể (Chỉ cần Refactor tối thiểu từ mô hình MVC). Bạn sẽ không cần phải làm quen quá nhiều với các
Pattern và khái niệm phức tạp như DDD. Các section quan trọng sẽ bao gồm:
● Làm việc với dữ liệu: Cho bạn Pattern cơ bản khi làm việc với Data trong ứng dụng.
● Domain Models: Đại diện cho các đối tượng nghiệp vụ, tách biệt với đối tượng cơ sở dữ liệu (hoặc
đối tượng theo hướng Technical).
● Actions: Các business logic nghiệp vụ sẽ nằm tại Actions.
● Repositories: Cầu nối quan trọng giữa tầng Domain (Nghiệp vụ) đến tầng Application /
Infrastructure (Ứng dụng / Hạ tầng) của bạn.
Hãy nhớ, cách thiết kế này không phải “Domain Driven Design”. Mình hy vọng bạn có thể tìm thấy một
“Phương pháp luận” từ ebook này, giúp bạn có một cơ sở lý thuyết vững chắc hơn khi bạn bắt đầu thiết kế
ứng dụng của mình. Việc thiết kế ứng dụng là rất linh hoạt và nó phản ánh quan điểm của mỗi người, nên
hãy yên tâm nếu bạn và mình có những quan điểm khác nhau trong thiết kế.
