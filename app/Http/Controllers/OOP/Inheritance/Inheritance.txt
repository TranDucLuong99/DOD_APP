Kế thừa (Inheritance)
Kế thừa là khả năng xây dựng các class mới dựa trên các class đã tồn tại. Lợi ích chính của kế thừa
là tái sử dụng code. Nếu bạn chỉ muốn tạo một class có một số hành vi khác với class hiện tại, sử
dụng kế thừa giúp bạn không cần phải sao chép code của class cha. Thay vào đó, bạn mở rộng
class hiện tại, đưa thêm các chức năng bổ sung ở class con. Class con sẽ được kế thừa các phương
thức của lớp cha.
Đối với kế thừa, bạn phải đảm bảo rằng class con sẽ có những khả năng giống hệt class cha. Nếu ở
class cha có các phương thức trừu tượng (abstract method), bạn sẽ vẫn phải triển khai nó ở class
con, kể cả bạn không cần đến nó. Kế thừa có một rủi ro rất lớn, là bạn có thể vô tình khiến cho class
con hoạt động không giống như class cha (vi phạm nguyên tắc thay thế Liskov, mình sẽ bàn luận nó
sâu hơn ở section SOLID bên dưới). Điều này dẫn tới bug vô tình trong ứng dụng mà bạn khó lường
trước, và nó cũng dẫn tới một nguyên tắc quan trọng nữa khi lập trình OOP: Composition over
Inheritance (Ưu tiên sử dụng thành phần thay vì kế thừa).
Tiếp tục là một ví dụ đơn giản về Animal, Cat, Dog để minh hoạ cho kế thừa:

<?php
// Class cha
class Animal {
// Thuộc tính chung cho tất cả các động vật
protected $name;
// Constructor để khởi tạo tên động vật
public function __construct($name) {
$this->name = $name;
}
// Phương thức chung cho tất cả các động vật
public function eat() {
echo $this->name . " đang ăn\n";
}
}
// Clas con Dog kế thừa từ lớp cha Animal
class Dog extends Animal {
// Phương thức đặc trưng cho Dog
public function bark() {
echo $this->name . " sủa: Gâu gâu\n";
}
}
// Class con Cat kế thừa từ lớp cha Animal
class Cat extends Animal {
// Phương thức đặc trưng cho Cat
public function meow() {
echo $this->name . " kêu: Meo meo\n";
}
}
// Sử dụng các class con
$dog = new Dog("Chó");
$cat = new Cat("Mèo");
$dog->eat(); // Output: Chó đang ăn
$dog->bark(); // Output: Chó sủa: Gâu gâu
$cat->eat(); // Output: Mèo đang ăn
$cat->meow(); // Output: Mèo kêu: Meo meo
?>
