Observer
Observer là một mẫu thiết kế hành vi cho phép bạn xác định một cơ chế đăng ký để cho phép nhiều
đối tượng nhận thông báo về các sự kiện xảy ra đối với đối tượng mà chúng đang quan tâm. Điều
này giúp tách biệt code, đảm bảo rằng các đối tượng lắng nghe (observe) không phụ thuộc chặt chẽ
vào đối tượng gốc, giúp ứng dụng của bạn linh hoạt hơn rất nhiều.
Dấu hiệu nhận biết:
Bạn cần kích hoạt một loạt các hành vi theo sau bởi một sự kiện nào đó. Ví dụ khi một đơn đặt hàng
thành công, mình cần gửi Mail thông báo, tiến hành trừ kho hàng hoá, …. Nếu không sử dụng
Observer, bạn cần kích hoạt nó trực tiếp trong phương thức xử lý đặt hàng. Với observer, bạn chỉ
cần gửi một sự kiện, và tuỳ ý các class đã đăng ký xử lý theo nghiệp vụ riêng biệt.
Ví dụ:
<?php
// Định nghĩa interface subject, để chuẩn bị cho việc thêm (attach) observer, bớt
(detach), và gửi thông báo (notify) tới các Observer
interface Subject {
public function attach(Observer $observer);
public function detach(Observer $observer);
public function notify();
}
interface Observer {
public function update($state);
}
// Class Order cho phép các observer đăng ký nhận sự kiện. Khi trạng thái đơn
hàng thay đổi qua hàm setState, tiến hành gọi hàm notify() để thông báo đến tất
cả các Observer.
class Order implements Subject {
private $observers = [];
private $state;
public function attach(Observer $observer) {
$this->observers[] = $observer;
}
public function detach(Observer $observer) {
$this->observers = array_filter($this->observers, function($o) use
($observer) {
return $o !== $observer;
});
}
public function notify() {
foreach ($this->observers as $observer) {
$observer->update($this->state);
}
}
public function setState($state) {
$this->state = $state;
$this->notify();
}
public function getState() {
return $this->state;
}
}
// Các Observer sẽ đăng ký nhận thông tin
class CustomerObserver implements Observer {
public function update($state) {
echo "Customer: Your order status has changed to $state.\n";
}
}
class AdminObserver implements Observer {
public function update($state) {
echo "Admin: Order status has changed to $state.\n";
}
}
class WarehouseObserver implements Observer {
public function update($state) {
echo "Warehouse: Order status has changed to $state. Prepare for
shipping.\n";
}
}
// Sử dụng Observer
// Tạo đối tượng Order
$order = new Order();
// Tạo các đối tượng Observer
$customerObserver = new CustomerObserver();
$adminObserver = new AdminObserver();
$warehouseObserver = new WarehouseObserver();
// Gắn các Observer vào Order
$order->attach($customerObserver);
$order->attach($adminObserver);
$order->attach($warehouseObserver);
// Thay đổi trạng thái của Order
$order->setState('Processing'); // Output:
// Customer: Your order status has changed to
Processing.
// Admin: Order status has changed to
Processing.
// Warehouse: Order status has changed to
Processing. Prepare for shipping.
// Thay đổi trạng thái của Order lần nữa
$order->setState('Shipped'); // Output:
// Customer: Your order status has changed to
Shipped.
// Admin: Order status has changed to Shipped.
// Warehouse: Order status has changed to
Shipped. Prepare for shipping.
// Tháo một Observer
$order->detach($warehouseObserver);
// Thay đổi trạng thái của Order lần nữa
$order->setState('Delivered'); // Output:
// Customer: Your order status has changed to
Delivered.
// Admin: Order status has changed to Delivered.
?>
